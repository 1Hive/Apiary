#!/usr/bin/env node
const fs = require('fs')
const got = require('got')
const _ = require('lodash')
const { createObjectCsvWriter } = require('csv-writer')

const QUERY = `query(
  $after: Cursor
) {
  organisations(
    take: 100
    after: $after
  ) {
    pageInfo {
      hasNextPage
      endCursor
    }
    nodes {
      ens
      address
      activity
      aum
      ant
      proxies {
        appId
        app {
          name
        }
      }
    }
  }
}`

async function fetchPage (
  after = null
) {
  const {
    body: { data }
  } = await got.post('https://daolist.1hive.org', {
    json: {
      query: QUERY,
      variables: {
        after
      }
    },
    responseType: 'json'
  })

  return data
}

async function fetchData (
  quadratic,
  orgBlacklist = []
) {
  let organisations = []
  let apps = []
  const totals = {
    activity: 1,
    aum: 1,
    ant: 1
  }

  // Fetch all the data
  let lastCursor
  let hasNextPage = true
  while (hasNextPage) {
    // Fetch the current page
    const data = await fetchPage(lastCursor)
    lastCursor = data.organisations.pageInfo.endCursor
    hasNextPage = data.organisations.pageInfo.hasNextPage

    // Filter out non-indexed apps
    const filtered = _.chain(data.organisations.nodes)
      .filter(
        ({ address }) => !orgBlacklist.includes(address)
      )
      .map((org) => ({
        ...org,
        proxies: org.proxies.filter((proxy) => proxy.app)
      }))
      .value()

    // Transform organisations in current page
    let transformed = _.chain(filtered)
      .map(_.partialRight(_.pick, [
        'address',
        'ens',
        'activity',
        'aum',
        'ant',
        'proxies'
      ]))
      .map((org) => ({
        ...org,
        proxies: org.proxies.length
      }))

    if (quadratic) {
      transformed = transformed.map(
        (org) => ({
          ...org,
          activitySqrt: Math.sqrt(org.activity),
          aumSqrt: Math.sqrt(org.aum),
          antSqrt: Math.sqrt(org.ant)
        })
      )
    }

    // Extract the data
    organisations = organisations.concat(
      transformed.value()
    )
    apps = apps.concat(
      _.chain(filtered)
        .flatMap((org) => org.proxies.map(
          (proxy) => ({
            organisation: org.address,
            id: proxy.appId,
            name: proxy.app.name
          })
        ))
        .value()
    )
  }

  // Calculate KPI totals
  if (quadratic) {
    totals.activity = _.sumBy(organisations, 'activitySqrt')
    totals.aum = _.sumBy(organisations, 'aumSqrt')
    totals.ant = _.sumBy(organisations, 'antSqrt')
  } else {
    totals.activity = _.sumBy(organisations, 'activity')
    totals.aum = _.sumBy(organisations, 'aum')
    totals.ant = _.sumBy(organisations, 'ant')
  }

  return {
    organisations: _.keyBy(organisations, 'address'),
    apps,
    totals
  }
}

function scoring (weights, quadratic) {
  const [
    activityWeight,
    aumWeight,
    antWeight
  ] = weights
  return function (data) {
    const organisationScores = _.chain(data.organisations)
      .mapValues((org) => {
        // Calculate normalized KPIs
        const normalizedActivity = (quadratic
          ? org.activitySqrt
          : org.activity) / data.totals.activity
        const normalizedAum = (quadratic
          ? org.aumSqrt
          : org.aum) / data.totals.aum
        const normalizedAnt = (quadratic
          ? org.antSqrt
          : org.ant) / data.totals.ant

        // Calculate score
        const score = normalizedActivity * activityWeight + normalizedAum * aumWeight + normalizedAnt * antWeight
        return {
          ...org,
          score
        }
      })
      .value()
    const appScores = _.chain(data.apps)
      .groupBy('id')
      .mapValues((instances) => {
        const score = _.chain(instances)
          .map((instance) => {
            const organisation = data.organisations[instance.organisation]

            const score = organisationScores[instance.organisation].score / organisation.proxies
            return score
          })
          .sum()
          .value()

        return {
          name: instances[0].name,
          id: instances[0].id,
          score
        }
      })
      .flatMap()
      .value()

    return {
      organisationScores: _.chain(organisationScores)
        .flatMap()
        .sortBy('score')
        .reverse()
        .value(),
      appScores: _.chain(appScores)
        .sortBy('score')
        .reverse()
        .value()
    }
  }
}

function payouts (
  scores,
  eligibleApps = [],
  potSize = 100000
) {
  const eligibleScoreTotal = _.chain(scores.appScores)
    .filter(({ id }) => eligibleApps.includes(id))
    .sumBy('score')
    .value()

  scores.appScores = scores.appScores.map((appScore) => {
    const eligible = eligibleApps.includes(appScore.id)

    let payout = 0
    if (eligible) {
      payout = potSize * (appScore.score / eligibleScoreTotal)
    }

    return {
      ...appScore,
      payout,
      eligible
    }
  })

  return scores
}

function saveScores ({
  organisationScores,
  appScores
}) {
  const orgScoreFile = createObjectCsvWriter({
    path: 'organisation_scores.csv',
    header: [{
      id: 'address',
      title: 'ADDRESS'
    }, {
      id: 'ens',
      title: 'ENS_NAME'
    }, {
      id: 'activity',
      title: 'ACTIVITY'
    }, {
      id: 'aum',
      title: 'AUM'
    }, {
      id: 'ant',
      title: 'ANT'
    }, {
      id: 'score',
      title: 'SCORE'
    }]
  })
  const appScoreFile = createObjectCsvWriter({
    path: 'app_scores.csv',
    header: [{
      id: 'id',
      title: 'APP_ID'
    }, {
      id: 'name',
      title: 'APP_NAME'
    }, {
      id: 'score',
      title: 'SCORE'
    }, {
      id: 'payout',
      title: 'PAYOUT'
    }, {
      id: 'eligible',
      title: 'ELIGIBLE'
    }]
  })

  return Promise.all([
    orgScoreFile.writeRecords(organisationScores),
    appScoreFile.writeRecords(appScores)
  ])
}

// Parse command line parameters
const {
  _: parameters,
  quadratic,
  apps: appsWhitelistPath,
  blacklist: orgBlacklistPath,
  pot
} = require('minimist')(process.argv.slice(2), {
  alias: {
    quadratic: 'quad',
    blacklist: 'blacklisted-orgs'
  },
  default: {
    quadratic: false,
    pot: 100000
  }
})

if (parameters.length < 3) {
  console.error('Usage: ./calcscore <activity weight> <aum weight> <ant weight> [flags]')
  console.error()
  console.error('Flags:')
  console.error('--quad, --quadratic')
  console.error('\tUse quadratic scoring')
  console.error('--apps')
  console.error('\tPath to a file of app IDs eligible for payouts')
  console.error('--blacklist, --blacklisted-orgs')
  console.error('\tPath to a file of organisation addresses that are blacklisted')
  console.error('--pot')
  console.error('\tThe size of the payout pot. Defaults to 100k.')
  console.error()
  console.error('App ID file')
  console.error('===')
  console.error('The file used for `--apps` should be a newline delimited file of app IDs')
  console.error()
  console.error('Organisation blacklist file')
  console.error('===')
  console.error('The file used for `--blacklist` should be a newline delimited file of checksummed organisation addresses')
  process.exit(1)
}

// Validate that weights add up to 1
const weights = _.map(parameters, Number)
const sumOfWeights = _.sum(weights)
if (sumOfWeights !== 1) {
  console.error(`The sum of the weights should be 1, is ${sumOfWeights}`)
  process.exit(1)
}

// Process and validate files
let orgBlacklist = []
if (orgBlacklistPath) {
  const blacklist = fs.readFileSync(orgBlacklistPath, {
    encoding: 'utf8'
  })
  orgBlacklist = blacklist
    .split('\n')
    .filter(_.identity)
}

let eligibleApps = []
if (appsWhitelistPath) {
  const whitelist = fs.readFileSync(appsWhitelistPath, {
    encoding: 'utf8'
  })
  eligibleApps = whitelist
    .split('\n')
    .filter(_.identity)
}

// Run script
console.log(`Calculating app scores (${quadratic ? 'quadratic' : 'linear'}, weights = [${weights.join(', ')}])`)
console.log(`Blacklisted orgs: ${orgBlacklist.length}`)
console.log(`Eligible apps: ${eligibleApps.length}`)
console.log(`Pot size: ${pot}`)
console.log('Fetching data...')
fetchData(quadratic, orgBlacklist)
  .then((data) => {
    console.log('Data fetched.')
    if (quadratic) {
      console.log('Note these are the sum of square roots of each KPI.')
    }

    console.log(`- ${_.size(data.organisations)} organisations`)
    console.log(`- ${_.size(data.apps)} app instances`)
    console.log(`- ${data.totals.activity} total activity`)
    console.log(`- ${data.totals.aum} total AUM`)
    console.log(`- ${data.totals.ant} total ANT`)

    return data
  })
  .then(
    scoring(weights, quadratic)
  )
  .then((scores) => {
    const orgScoreSum = _.sumBy(scores.organisationScores, 'score')
    const appScoreSum = _.sumBy(scores.appScores, 'score')
    console.log('Calculated scores.')
    console.log(`Sanity check; organisation score sum = ${orgScoreSum}, app score sum = ${appScoreSum}`)

    console.log('Projecting payouts...')
    return payouts(scores, eligibleApps, pot)
  })
  .then(saveScores)
  .then(() => {
    console.log('Saved scores to disk.')
  })
  .catch((err) => {
    console.error('An error occurred')
    console.error(err)
  })
